name: OpenAPI to GitHub Packages

inputs:
  input:
    description: 'Path of OpenAPI schema, YAML or JSON. (ex: "src/login_server.yaml", "auth_service.swagger.json")'
    required: true
  versioning:
    description: |
      Package versioning policy, must be one of "file", "tag", "canary", and "manual". (default: "file")

      Version policy:
      - On "file", content of current directory's "VERSION" file will be used as a package version.
      - On "tag", current workflow's git tag minus the leading v is used as a package version. If current workflow is not git tag push or tag name does not start with "v", this action will do nothing but fail.
      - On "canary", "0.0.0-canary.<COMMIT HASH>" will be used as a package version, and "canary" distribution tag will be appended to built NPM package.
      - On "manual", "version" parameter of this action will be used as a package version.
      - Otherwise, this action will do nothing but fail.

      Behavior on duplicated version:
      - If "file" or "canary" versioning policy is used, this action will not fail but silently skip build process even if specified version already does exist in the package registry.
      - Otherwise, this action will explicitly fail if specified version already does exist in the package registry.
    default: file
  version:
    description: 'If "versioning" parameter is "manual", this field will be used as version of built NPM package. Otherwise, ignored. (ex: "1.2.0")'
  name:
    description: 'Name of built NPM package. (ex: "mypackage", default: Name of repository)'
    default: ${{ github.event.repository.name }}
  scope:
    description: 'Scope of built NPM package. (ex: "myorg", default: GitHub username of repository owner)'
    default: ${{ github.repository_owner }}
  registry-url:
    description: 'URL of NPM registry to upload. (default: "https://npm.pkg.github.com")'
    default: https://npm.pkg.github.com
  generator-docker-repository:
    description: The Docker repository uses as source for openapitools/openapi-generator-cli image.
    required: false
    default: "docker.io"
  generator-docker-image:
    description: The Docker image used by the generator.
    required: false
    default: "openapitools/openapi-generator-cli"
  openapi-generator-version:
    description: 'The Docker tag of the openapitools/openapi-generator-cli image to use. See https://hub.docker.com/r/openapitools/openapi-generator-cli/tags for available tags. (ex: "latest", "v7.1.0", default: "v6.2.1")'
    default: v6.2.1
  generator-type:
    description: 'The generator you wish to use. See https://openapi-generator.tech/docs/generators/ for available generators. (ex: "javascript", "typescript-fetch", default: "typescript-axios")'
    default: typescript-axios
  generator-cli-args:
    description: 'Additional arguments to pass through to the generate command. (default: "--additional-properties paramNaming=original,supportsES6=true")'
    default: --additional-properties paramNaming=original,supportsES6=true
  additional-files:
    description: 'The additional file list to include in the NPM package. Write a YAML object as a string, with file paths in the working directory as keys and the paths to be included in the package as values. (ex: "{ src-path1: dst-path1, src-path2: dst-path2 }", default: "{}")'
    default: '{}'
  override-packagejson:
    description: |
      JSON object to override the default package.json generated during the package build process. (ex: '{"scripts":{"start":"node index.js"}}', default: "{}")

      This feature is useful for customizing various aspects of the npm package, such as adding additional metadata, scripts, dependencies, or any other fields supported by package.json.

      The JSON object should be formatted as a string. For example, to add custom scripts and dependencies, format it as: '{"scripts":{"start":"node index.js"}}'. This string will be merged with the default package.json, allowing for extensive customization of the package.

      If left empty (default behavior), the action will proceed with the default package.json configuration without any custom overrides.
    default: '{}'
  axios-version:
    description: 'The axios version in package.json'
    required: false
    default: '^0.27.2'

runs:
  using: composite
  steps:
    # Determine package version using the given versioning policy
    - id: x
      shell: bash
      run: |
        case '${{ inputs.versioning }}' in
          file)
            echo "version=$(cat VERSION)" >> "${GITHUB_OUTPUT}"
            echo 'publish-args=' >> "${GITHUB_OUTPUT}"
            ;;

          tag)
            if [[ $GITHUB_REF != refs/tags/v* ]]; then
              exit 1
            fi
            echo "version=${GITHUB_REF#refs/tags/v}" >> "${GITHUB_OUTPUT}"
            echo 'publish-args=' >> "${GITHUB_OUTPUT}"
            ;;

          canary)
            echo 'version=0.0.0-canary.${{ github.sha }}' >> "${GITHUB_OUTPUT}"
            echo 'publish-args=--tag canary' >> "${GITHUB_OUTPUT}"
            ;;

          manual)
            echo 'version=${{ inputs.version }}' >> "${GITHUB_OUTPUT}"
            echo 'publish-args=' >> "${GITHUB_OUTPUT}"
            ;;

          *)
            exit 1
            ;;
        esac

    # Ensure that the package does already exist in the registry, and the
    # determined version does not already exist in the registry
    - id: check
      shell: bash
      run: |
        set -o pipefail

        # Make sure that given version of package of package itself does not
        # already exist in the registry
        if ! (
          curl -fH 'Authorization: Bearer ${{ github.token }}' '${{ inputs.registry-url }}/@${{ inputs.scope }}/${{ inputs.name }}' |
          jq -e '.versions | keys | index("${{ steps.x.outputs.version }}")'
        ); then
          echo 'result=do' >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        # If given version of package does already exist, we cannot proceed
        echo 'Package "@${{ inputs.scope }}/${{ inputs.name }}@${{ steps.x.outputs.version }}" already exists in the package registry'

        # Skip silently if versioning policy is "file" or "canary"
        if [[ '${{ inputs.versioning }}' == 'file' || '${{ inputs.versioning }}' == 'canary' ]]; then
          echo 'Since current versioning policy is "${{ inputs.versioning }}", this action will silently do nothing'
          echo 'result=skip' >> "${GITHUB_OUTPUT}"
          exit 0
        fi

        # Otherwise, fail
        echo 'result=fail' >> "${GITHUB_OUTPUT}"
        exit 1

    # Generate codes from OpenAPI
    - if: steps.check.outputs.result == 'do'
      uses: openapi-generators/openapitools-generator-action@v1
      with:
        openapi-file: ${{ inputs.input }}
        generator: ${{ inputs.generator-type }}
        generator-tag: ${{ inputs.openapi-generator-version }}
        command-args: ${{ inputs.generator-cli-args }}
        docker-repository: ${{ inputs.generator-docker-repository }}
        docker-image: ${{ inputs.generator-docker-image }}

    # Package and publish codes
    - if: steps.check.outputs.result == 'do'
      uses: actions/setup-node@v3
      with:
        node-version: '22.9'
        registry-url: ${{ inputs.registry-url }}
        scope: '@${{ inputs.scope }}'
    - if: steps.check.outputs.result == 'do'
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ github.token }}
      run: |
        mv '${{ inputs.generator-type }}-client' '${{ runner.temp }}/src'

        readarray -d '' ENTRIES < <(yq -0 'to_entries | .[] | @json' <<'EOF'
        ${{ inputs.additional-files }}
        EOF
        )

        for ENTRY in "${ENTRIES[@]}"; do
          SRC=$(jq -r '.key' <<< "${ENTRY}")
          DST=$(jq -r '.value' <<< "${ENTRY}")

          mkdir -p "$(dirname "${{ runner.temp }}/${DST}")"
          cp "${SRC}" "${{ runner.temp }}/${DST}"
        done

        FILES=$(yq -r 'to_entries | ["src/**.ts"] + map(.value) | @json' <<'EOF'
        ${{ inputs.additional-files }}
        EOF
        )

        cd '${{ runner.temp }}'

        cat - <<EOF <(echo '${{ inputs.override-packagejson }}') | jq -s '.[0] * .[1]' > package.json
        {
          "name": "@${{ inputs.scope }}/${{ inputs.name }}",
          "repository": {
            "type": "git",
            "url": "git+https://github.com/${{ github.repository }}.git"
          },
          "type": "module",
          "version": "${{ steps.x.outputs.version }}",
          "main": "./src/index.ts",
          "publishConfig": {
            "access": "restricted",
            "registry": "${{ inputs.registry-url}}"
          },
          "files": ${FILES},
          "peerDependencies": {
            "axios": "${{ inputs.axios-version }}"
          }
        }
        EOF

        npm publish ${{ steps.x.outputs.publish-args }}
